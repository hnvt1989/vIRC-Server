Message format in 'pseudo' BNF

The protocol messages must be extracted from the contiguous stream of octets. The current solution is to designate two characters, CR and LF, as message separators. Empty messages are silently ignored, which permits use of the sequence CR-LF between messages without extra problems.

The extracted message is parsed into the components <prefix>, <command> and list of parameters matched either by <middle> or <trailing> components.

The BNF representation for this is:

<message> ::=
[':' <prefix> <SPACE> ] <command> <params> <crlf>

<prefix> ::=
<servername> | <nick> [ '!' <user> ] [ '@' <host> ]

<command> ::=
<letter> { <letter> } | <number> <number> <number>

<SPACE> ::=
' ' { ' ' }

<params> ::=
<SPACE> [ ':' <trailing> | <middle> <params> ]

<middle> ::=
<Any *non-empty* sequence of octets not including SPACE or NUL or CR or LF, the first of which may not be ':'>

<trailing> ::=
<Any, possibly *empty*, sequence of octets not including NUL or CR or LF>

<crlf> ::=
CR LF
NOTES:

<SPACE> is consists only of SPACE character(s) (0x20). Specially notice that TABULATION, and all other control characters are considered NON-WHITE-SPACE.
After extracting the parameter list, all parameters are equal, whether matched by <middle> or <trailing>. <Trailing> is just a syntactic trick to allow SPACE within parameter.
The fact that CR and LF cannot appear in parameter strings is just artifact of the message framing. This might change later.
The NUL character is not special in message framing, and basically could end up inside a parameter, but as it would cause extra complexities in normal C string handling. Therefore NUL is not allowed within messages.
The last parameter may be an empty string.
Use of the extended prefix (['!' <user> ] ['@' <host> ]) must not be used in server to server communications and is only intended for server to client messages in order to provide clients with more useful information about who a message is from without the need for additional queries.
Most protocol messages specify additional semantics and syntax for the extracted parameter strings dictated by their position in the list. For example, many server commands will assume that the first parameter after the command is the list of targets, which can be described with:

<target> ::=
<to> [ "," <target> ]
<to> ::=
<channel> | <user> '@' <servername> | <nick> | <mask>
<channel> ::=
('#' | '&') <chstring>
<servername> ::=
<host>
<host> ::=
see RFC 952 [DNS:4] for details on allowed hostnames
<nick> ::=
<letter> { <letter> | <number> | <special> }
<mask> ::=
('#' | '$') <chstring>
<chstring> ::=
<any 8bit code except SPACE, BELL, NUL, CR, LF and comma (',')>
Other parameter syntaxes are:

<user> ::=
<nonwhite> { <nonwhite> }
<letter> ::=
'a' ... 'z' | 'A' ... 'Z'
<number> ::=
'0' ... '9'
<special> ::=
'-' | '[' | ']' | '\' | '`' | '^' | '{' | '}'
<nonwhite> ::=
<any 8bit code except SPACE (0x20), NUL (0x0), CR (0xd), and LF (0xa)>